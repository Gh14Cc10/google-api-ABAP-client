<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZGOOGLE_AUTH_OAUTH2" VERSION="1" LANGU="E" DESCRIPT="google_auth_oauth2" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
 <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_AUTH_TOKEN_LIFETIME_SECS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTVALUE="300" ATTEXPVIRT="0" TYPTYPE="1" TYPE="N" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_CLOCK_SKEW_SECS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="300" ATTEXPVIRT="0" TYPTYPE="1" TYPE="N" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_MAX_TOKEN_LIFETIME_SECS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTVALUE="86400" ATTEXPVIRT="0" TYPTYPE="1" TYPE="N" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_NAME" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;ZGOOGLE_AUTH_OAUTH2&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_OAUTH2_AUTH_URL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;https://accounts.google.com/o/oauth2/auth&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_OAUTH2_ISSUER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="12 " ATTDECLTYP="2" ATTVALUE="&apos;accounts.google.com&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_OAUTH2_REVOKE_URI" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;https://accounts.google.com/o/oauth2/revoke&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PC_OAUTH2_TOKEN_URI" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;https://accounts.google.com/o/oauth2/token&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PO_CLIENT" VERSION="1" LANGU="E" DESCRIPT="zgoogle_client" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZGOOGLE_CLIENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PS_TOKEN" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZGOOGLE_TOKEN_S" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PV_ASSERTIONCREDENTIALS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="PV_STATE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="AUTHENTICATE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="AUTHENTICATE" SCONAME="IP_CODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="AUTHENTICATE" SCONAME="RS_AUTH" VERSION="1" LANGU="E" DESCRIPT="Boolean" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGOOGLE_TOKEN_S"/>
  <source>METHOD authenticate.

*   We got here from the redirect from a successful authorization grant,
*   fetch the access token
    DATA lo_http_request TYPE REF TO zgoogle_http_request.
    DATA lt_body TYPE zgoogle_postbody_t.
    DATA ls_body TYPE zgoogle_postbody_s.
    DATA lt_result TYPE zgoogle_kcv_t.
    DATA ls_result TYPE zgoogle_kcv_s.

    ls_body-key = &apos;code&apos;.
    ls_body-value = ip_code.
    APPEND ls_body TO lt_body.
    ls_body-key = &apos;grant_type&apos;.
    ls_body-value = &apos;authorization_code&apos;.
    APPEND ls_body TO lt_body.
    ls_body-key = &apos;redirect_uri&apos;.
    lt_result = me-&gt;po_client-&gt;getclassconfig(
                  io_class = me
                  ip_key   = &apos;redirect_uri&apos;
*                    ip_class =
              ).
    READ TABLE lt_result INDEX 1 INTO ls_result.
    ls_body-value = ls_result-vvalue.
    APPEND ls_body TO lt_body.
    ls_body-key = &apos;client_id&apos;.
    lt_result = me-&gt;po_client-&gt;getclassconfig(
                  io_class = me
                  ip_key   = &apos;client_id&apos;
*                    ip_class =
              ).
    READ TABLE lt_result INDEX 1 INTO ls_result.
    ls_body-value = ls_result-vvalue.
    APPEND ls_body TO lt_body.
    ls_body-key = &apos;client_secret&apos;.
    lt_result = me-&gt;po_client-&gt;getclassconfig(
                  io_class = me
                  ip_key   = &apos;client_secret&apos;
*                    ip_class =
              ).
    READ TABLE lt_result INDEX 1 INTO ls_result.
    ls_body-value = ls_result-vvalue.
    APPEND ls_body TO lt_body.

    DATA: lv_url2 TYPE string.
    DATA: lv_url3 TYPE string.
    DATA: len TYPE i.
    DATA: pos1 TYPE i.
    DATA: pos2 TYPE i.
    DATA: pos3 TYPE i.

    FIND FIRST OCCURRENCE OF &apos;//&apos; IN me-&gt;pc_oauth2_token_uri MATCH OFFSET pos1.
    FIND FIRST OCCURRENCE OF &apos;/o/&apos; IN me-&gt;pc_oauth2_token_uri MATCH OFFSET pos2.
    len = pos2 - pos1 - 2.
    pos1 = pos1 + 2.
    lv_url2 = me-&gt;pc_oauth2_token_uri+pos1(len).
    len = strlen( me-&gt;pc_oauth2_token_uri ) - pos2.
    lv_url3 = me-&gt;pc_oauth2_token_uri+pos2(len).


    CREATE OBJECT lo_http_request
      EXPORTING
        url      = lv_url3
        method   = &apos;POST&apos;
        postbody = lt_body.    &quot; ZGOOGLE_POSTBODY_T

    lo_http_request-&gt;setbasecomponent( ip_basepath = lv_url2 ).

    DATA lt_config TYPE zgoogle_kcv_t.
    DATA ls_config TYPE zgoogle_kcv_s.
    me-&gt;po_client-&gt;getclassconfig(
*       io_class = &apos;Google_Http_Request&apos;
     ip_key   =  &apos;disable_gzip&apos;
     ip_class = &apos;ZGOOGLE_HTTP_REQUEST&apos;
 ).
    READ TABLE lt_config INTO ls_config INDEX 1.
    IF ls_config-vvalue EQ &apos;X&apos;.
      lo_http_request-&gt;disablegzip( ).
    ENDIF.

    DATA lo_response TYPE REF TO if_http_response.
    DATA xml_xstring TYPE string.

    DATA lo_io TYPE REF TO zgoogle_io_generic.
    lo_io = me-&gt;po_client-&gt;getio( ).
    lo_io-&gt;makerequest(
      EXPORTING
        io_http_request  =   lo_http_request   &quot; google_http_request
      IMPORTING
        eo_http_response = lo_response    &quot; HTTP Framework (iHTTP) HTTP Response
        ev_responsestr   = xml_xstring
    ).

    IF lo_response IS NOT INITIAL.
      DATA lv_code TYPE i.
      lo_response-&gt;get_status(
        IMPORTING
          code   =  lv_code  &quot; HTTP status code
*        reason =     &quot; HTTP status description
      ).
      IF lv_code EQ 200.
        me-&gt;setaccesstoken( ip_json = xml_xstring ).
        me-&gt;ps_token-created = sy-uzeit.
        rs_auth = me-&gt;ps_token.
      ENDIF.
    ENDIF.

  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="CONSTRUCTOR" SCONAME="IO_CLIENT" VERSION="1" LANGU="E" DESCRIPT="zgoogle_client" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZGOOGLE_CLIENT"/>
  <source>method CONSTRUCTOR.
    me-&gt;po_client = io_client.
  endmethod.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="CREATEAUTHURL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="CREATEAUTHURL" SCONAME="IP_SCOPES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="CREATEAUTHURL" SCONAME="RP_URL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <source>METHOD createauthurl.

    DATA lt_result TYPE zgoogle_kcv_t.
    DATA ls_result TYPE zgoogle_kcv_s.

    CONCATENATE zgoogle_auth_oauth2=&gt;pc_oauth2_auth_url &apos;?&apos; INTO rp_url IN CHARACTER MODE.
    CONCATENATE rp_url &apos;response_type=&apos; &apos;code&apos; &apos;&amp;&apos; INTO rp_url IN CHARACTER MODE.

    me-&gt;po_client-&gt;getclassconfig(
      EXPORTING
        io_class = me
        ip_key   = &apos;redirect_uri&apos;
*        ip_class =
      RECEIVING
        rt_value =  lt_result   &quot; ZGOOGLE_KCV_T
    ).
    READ TABLE lt_result INTO ls_result INDEX 1.

    CONCATENATE rp_url &apos;redirect_uri=&apos; ls_result-vvalue &apos;&amp;&apos; INTO rp_url IN CHARACTER MODE.

    me-&gt;po_client-&gt;getclassconfig(
      EXPORTING
        io_class = me
        ip_key   = &apos;client_id&apos;
*        ip_class =
      RECEIVING
        rt_value =  lt_result   &quot; ZGOOGLE_KCV_T
    ).
    READ TABLE lt_result INTO ls_result INDEX 1.

    CONCATENATE rp_url &apos;client_id=&apos; ls_result-vvalue &apos;&amp;&apos; INTO rp_url IN CHARACTER MODE.
    CONCATENATE rp_url &apos;scope=&apos; ip_scopes &apos;&amp;&apos; INTO rp_url IN CHARACTER MODE.

    me-&gt;po_client-&gt;getclassconfig(
      EXPORTING
        io_class = me
        ip_key   = &apos;access_type&apos;
*        ip_class =
      RECEIVING
        rt_value =  lt_result   &quot; ZGOOGLE_KCV_T
    ).
    READ TABLE lt_result INTO ls_result INDEX 1.

    CONCATENATE rp_url &apos;access_type=&apos; ls_result-vvalue &apos;&amp;&apos; INTO rp_url IN CHARACTER MODE.

    me-&gt;po_client-&gt;getclassconfig(
      EXPORTING
        io_class = me
        ip_key   = &apos;approval_prompt&apos;
*        ip_class =
      RECEIVING
        rt_value =  lt_result   &quot; ZGOOGLE_KCV_T
    ).
    READ TABLE lt_result INTO ls_result INDEX 1.

    CONCATENATE rp_url &apos;approval_prompt=&apos; ls_result-vvalue INTO rp_url IN CHARACTER MODE.


*   If the list of scopes contains plus.login, add request_visible_actions
*   to auth URL.
    SEARCH ip_scopes FOR &apos;plus.login&apos;.
    IF sy-subrc EQ 0.
      me-&gt;po_client-&gt;getclassconfig(
     EXPORTING
       io_class = me
       ip_key   = &apos;request_visible_actions&apos;
*        ip_class =
     RECEIVING
       rt_value =  lt_result   &quot; ZGOOGLE_KCV_T
   ).
      READ TABLE lt_result INTO ls_result INDEX 1.

      CONCATENATE rp_url &apos;&amp;&apos; &apos;request_visible_actions=&apos; ls_result-vvalue INTO rp_url IN CHARACTER MODE.

    ENDIF.

    IF me-&gt;pv_state IS NOT INITIAL.
      CONCATENATE rp_url &apos;&amp;&apos; &apos;state=&apos; me-&gt;pv_state INTO rp_url IN CHARACTER MODE.
    ENDIF.

    CONDENSE rp_url NO-GAPS.
    rp_url = rp_url.

  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="GETACCESSTOKEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="GETACCESSTOKEN" SCONAME="RS_TOKEN" VERSION="1" LANGU="E" DESCRIPT="ZGOOGLE_KCV_S" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGOOGLE_TOKEN_S"/>
  <source>method GETACCESSTOKEN.

    rs_token = me-&gt;ps_token.

  endmethod.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="ISACCESSTOKENEXPIRED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="ISACCESSTOKENEXPIRED" SCONAME="EP_VALUE" VERSION="1" LANGU="E" DESCRIPT="Boolean" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGOOGLE_BOOL"/>
  <source>METHOD isaccesstokenexpired.

    IF me-&gt;ps_token IS INITIAL OR me-&gt;ps_token-created IS INITIAL.
      ep_value = &apos;X&apos;.
      RETURN.
    ENDIF.

*   If the token is set to expire in the next 30 seconds.
      DATA lv_secs TYPE i.
      lv_secs = ps_token-expires_in - 30.

      DATA lv_time type tims.
      lv_time = me-&gt;ps_token-created + lv_secs.

      IF lv_time LT sy-uzeit.
        ep_value = &apos;X&apos;.
        RETURN.
      ENDIF.

    ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKEN" SCONAME="IP_REFRESHTOKEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <source>METHOD refreshtoken.

    DATA lt_client_id TYPE zgoogle_kcv_t.
    DATA ls_client_id TYPE zgoogle_kcv_s.
    DATA lt_client_s TYPE zgoogle_kcv_t.
    DATA ls_client_s TYPE zgoogle_kcv_s.

    lt_client_id = me-&gt;po_client-&gt;getclassconfig(
                                                                            io_class = me
                                                                            ip_key   = &apos;client_id&apos;
*                                                                           ip_class =
                                                       ).
    lt_client_s = me-&gt;po_client-&gt;getclassconfig(
                                                                            io_class = me
                                                                            ip_key   = &apos;client_secret&apos;
*                                                                           ip_class =
                                                       ).

    READ TABLE lt_client_id INTO ls_client_id INDEX 1.
    READ TABLE lt_client_s INTO ls_client_s INDEX 1.


    me-&gt;refreshtokenrequest( EXPORTING ip_client_id =  ls_client_id-vvalue
                                       ip_client_secret = ls_client_s-vvalue
                                       ip_refresh_token = ip_refreshtoken
                                       ip_grant_type = &apos;refresh_token&apos; ).


  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" SCONAME="IP_CLIENT_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" SCONAME="IP_CLIENT_SECRET" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" SCONAME="IP_REFRESH_TOKEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" SCONAME="IP_GRANT_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <exception CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="REFRESHTOKENREQUEST" SCONAME="GOOGLE_AUTH_EXCEPTION" VERSION="1" LANGU="E" DESCRIPT="Could not json decode the access token" MTDTYPE="0" EDITORDER="1 "/>
  <source>METHOD refreshtokenrequest.

    DATA lt_postbody      TYPE zgoogle_postbody_t.
    DATA ls_postbody      TYPE zgoogle_postbody_s.
    DATA lo_http_response TYPE REF TO if_http_response.
    DATA lv_code          TYPE i.
    DATA lv_body          TYPE string.
    DATA lo_writer        TYPE REF TO cl_sxml_string_writer.
    DATA lv_token         TYPE xstring.

    ls_postbody-key = &apos;client_id&apos;.
    ls_postbody-value = ip_client_id.
    APPEND ls_postbody TO lt_postbody.

    ls_postbody-key = &apos;client_secret&apos;.
    ls_postbody-value = ip_client_id.
    APPEND ls_postbody TO lt_postbody.

    ls_postbody-key = &apos;refresh_token&apos;.
    ls_postbody-value = ip_refresh_token.
    APPEND ls_postbody TO lt_postbody.

    ls_postbody-key = &apos;grant_type&apos;.
    ls_postbody-value = ip_grant_type.
    APPEND ls_postbody TO lt_postbody.

    DATA lo_http_request TYPE REF TO zgoogle_http_request.
    CREATE OBJECT lo_http_request
      EXPORTING
        url      = zgoogle_auth_oauth2=&gt;pc_oauth2_token_uri
        method   = &apos;POST&apos;
        postbody = lt_postbody.

    DATA lt_config TYPE zgoogle_kcv_t.
    DATA ls_config TYPE zgoogle_kcv_s.
    me-&gt;po_client-&gt;getclassconfig(
*       io_class = &apos;Google_Http_Request&apos;
     ip_key   =  &apos;disable_gzip&apos;
     ip_class = &apos;ZGOOGLE_HTTP_REQUEST&apos;
 ).
    READ TABLE lt_config INTO ls_config INDEX 1.
    IF ls_config-vvalue EQ &apos;X&apos;.
      lo_http_request-&gt;disablegzip( ).
    ENDIF.
    me-&gt;po_client-&gt;getio( )-&gt;makerequest(
      EXPORTING
        io_http_request  = lo_http_request    &quot; google_http_request
      IMPORTING
        eo_http_response = lo_http_response    &quot; HTTP Framework (iHTTP) HTTP Response
        ev_responsestr   = lv_body
    ).
*
    lo_http_response-&gt;get_status( IMPORTING code = lv_code ).
    IF lv_code EQ 200.
      me-&gt;setaccesstoken( ip_json = lv_body ).
      me-&gt;ps_token-created = sy-uzeit.
*      rs_auth = me-&gt;ps_token.
    ENDIF.

  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="SETACCESSTOKEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="SETACCESSTOKEN" SCONAME="IP_JSON" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <source>METHOD setaccesstoken.

    &quot;JSON REFERENCE
    DATA lo_json TYPE REF TO zcl_json_document.

    zcl_json_document=&gt;create_with_json(
      EXPORTING
        json          = ip_json
*      date_format   =
      RECEIVING
        json_document = lo_json    &quot; JSON Document
    ).

    TYPES: BEGIN OF s_data,
              error type string,
              error_description type string,
              access_token type string,
              token_type type string,
              expires_in type i,
              refresh_token type string,
              id_token type string,
           END OF s_data.
    DATA ls_data type s_data.

    lo_json-&gt;get_data(
      IMPORTING
        data              = ls_data
    ).

    me-&gt;ps_token-expires_in = ls_data-expires_in.
    me-&gt;ps_token-refresh_token = ls_data-refresh_token.
    me-&gt;ps_token-value = ls_data-access_token.
*      CATCH zcx_json_document.    &quot;


  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="SIGN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="SIGN" SCONAME="IO_HTTP_REQUEST" VERSION="1" LANGU="E" DESCRIPT="google_http_request" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZGOOGLE_HTTP_REQUEST"/>
  <parameter CLSNAME="ZGOOGLE_AUTH_OAUTH2" CMPNAME="SIGN" SCONAME="RO_HTTP_REQUEST" VERSION="1" LANGU="E" DESCRIPT="google_http_request" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZGOOGLE_HTTP_REQUEST"/>
  <source>METHOD sign.
*TODO
*    add the developer key to the request before signing it

    ro_http_request = io_http_request.

    DATA lt_result TYPE zgoogle_kcv_t.
    DATA ls_result TYPE zgoogle_kcv_s.

    lt_result = me-&gt;po_client-&gt;getclassconfig(
       io_class = me
       ip_key   = &apos;developer_key&apos;
*       ip_class =
   ).

    READ TABLE lt_result INTO ls_result INDEX 1.
    DATA lv_devkey TYPE string.

    IF ls_result-vvalue IS NOT INITIAL.
      ro_http_request-&gt;setqueryparam( ip_key = &apos;key&apos; ip_value = ls_result-vvalue ).   &quot;ATU
    ENDIF.

*   Cannot sign the request without an OAuth access token.
    IF me-&gt;ps_token IS INITIAL AND me-&gt;pv_assertioncredentials IS INITIAL. &quot;ATU
      RETURN.
    ENDIF.


*    Check if the token is set to expire in the next 30 seconds
*    (or has already expired).
    IF me-&gt;isaccesstokenexpired( ) EQ &apos;X&apos;.
      IF me-&gt;pv_assertioncredentials IS NOT INITIAL.
*        $this-&gt;refreshTokenWithAssertion(); -----------&gt; TODO
      ELSE.
        IF me-&gt;ps_token-refresh_token IS INITIAL.
*            throw new Google_Auth_Exception(
*                &quot;The OAuth 2.0 access token has expired,&quot;
*                .&quot; and a refresh token is not available. Refresh tokens&quot;
*                .&quot; are not returned for responses that were auto-approved.&quot;
*            );
        ENDIF.
        me-&gt;refreshtoken( me-&gt;ps_token-refresh_token ).&quot; ------------&gt; TO FINISH
      ENDIF.
    ENDIF.

*   Add the OAuth2 header to the request
    DATA lv_value TYPE string.
    DATA lv_key TYPE string value &apos;Authorization&apos;.
    CONCATENATE &apos;Bearer &apos; me-&gt;ps_token-value INTO lv_value RESPECTING BLANKS.
    ro_http_request-&gt;setrequestheaders( EXPORTING ip_key = lv_key
                                                  ip_value = lv_value ).


  ENDMETHOD.</source>
 </method>
</CLAS>
