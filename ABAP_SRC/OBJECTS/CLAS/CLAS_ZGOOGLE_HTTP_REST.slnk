<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZGOOGLE_HTTP_REST" VERSION="1" LANGU="E" DESCRIPT="google_http_rest" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
 <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <method CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="CREATEREQUESTURI" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="CREATEREQUESTURI" SCONAME="SERVICEPATH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="CREATEREQUESTURI" SCONAME="RESPATH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="CREATEREQUESTURI" SCONAME="PARAMS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="CREATEREQUESTURI" SCONAME="RP_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
  <source>METHOD createrequesturi.

    DATA lv_requesturl TYPE string.
    CONCATENATE servicepath respath INTO lv_requesturl.
*    $uriTemplateVars = array();
*    $queryVars = array();
*    foreach ($params as $paramName =&gt; $paramSpec) {
*      if ($paramSpec[&apos;type&apos;] == &apos;boolean&apos;) {
*        $paramSpec[&apos;value&apos;] = ($paramSpec[&apos;value&apos;]) ? &apos;true&apos; : &apos;false&apos;;
*      }
*      if ($paramSpec[&apos;location&apos;] == &apos;path&apos;) {
*        $uriTemplateVars[$paramName] = $paramSpec[&apos;value&apos;];
*      } else if ($paramSpec[&apos;location&apos;] == &apos;query&apos;) {
*        if (isset($paramSpec[&apos;repeated&apos;]) &amp;&amp; is_array($paramSpec[&apos;value&apos;])) {
*          foreach ($paramSpec[&apos;value&apos;] as $value) {
*            $queryVars[] = $paramName . &apos;=&apos; . rawurlencode($value);
*          }
*        } else {
*          $queryVars[] = $paramName . &apos;=&apos; . rawurlencode($paramSpec[&apos;value&apos;]);
*        }
*      }
*    if (count($uriTemplateVars)) {
*      $uriTemplateParser = new Google_Utils_URITemplate();
*      $requestUrl = $uriTemplateParser-&gt;parse($requestUrl, $uriTemplateVars);
*    }
*
*    if (count($queryVars)) {
*      $requestUrl .= &apos;?&apos; . implode($queryVars, &apos;&amp;&apos;);
*    }
*
    rp_value = lv_requesturl.

  ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="EXECUTE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="EXECUTE" SCONAME="IO_HTTP_REQUEST" VERSION="1" LANGU="E" DESCRIPT="google_http_request" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZGOOGLE_HTTP_REQUEST"/>
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="EXECUTE" SCONAME="IO_CLIENT" VERSION="1" LANGU="E" DESCRIPT="zgoogle_client" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZGOOGLE_CLIENT"/>
  <parameter CLSNAME="ZGOOGLE_HTTP_REST" CMPNAME="EXECUTE" SCONAME="ET_RETURN" VERSION="1" LANGU="E" DESCRIPT="String table" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGOOGLE_STRING_T"/>
  <source>METHOD execute.

    DATA lo_response TYPE REF TO if_http_response.
    DATA xml_xstring TYPE string.

    DATA lo_io TYPE REF TO zgoogle_io_generic.
    lo_io = io_client-&gt;getio( ).
    lo_io-&gt;makerequest(
      EXPORTING
        io_http_request  =   io_http_request   &quot; google_http_request
      IMPORTING
        eo_http_response = lo_response    &quot; HTTP Framework (iHTTP) HTTP Response
        ev_responsestr   = xml_xstring
    ).

    IF lo_response IS NOT INITIAL.
      DATA lv_code TYPE i.
      lo_response-&gt;get_status(
        IMPORTING
          code   =  lv_code  &quot; HTTP status code
*        reason =     &quot; HTTP status description
      ).
      IF lv_code EQ 200.
        DATA ls_return type line of zgoogle_string_t.
        ls_return = xml_xstring.
        append ls_return to et_return.

*    $httpRequest-&gt;setExpectedClass($req-&gt;getExpectedClass());
*     lv_ret = me-&gt;decodeHttpResponse( ip_json = xml_xstring ).
*return lv_ret
      ENDIF.
    ENDIF.

  ENDMETHOD.</source>
 </method>
</CLAS>
